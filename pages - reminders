import React, { useState, useEffect } from "react";
import { Reminder } from "@/entities/Reminder";
import { User } from "@/entities/User";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { Button } from "@/components/ui/button";
import { motion } from "framer-motion";
import { 
  Bell, 
  Calendar, 
  CreditCard, 
  Check,
  Star,
  User as UserIcon
} from "lucide-react";
import { format } from "date-fns";
import { ptBR } from "date-fns/locale";

export default function RemindersPage() {
  const [reminders, setReminders] = useState([]);
  const [user, setUser] = useState(null);

  useEffect(() => {
    loadData();
  }, []);

  const loadData = async () => {
    try {
      const currentUser = await User.me();
      setUser(currentUser);
      
      const remindersData = await Reminder.filter(
        { user_email: currentUser.email }, 
        "-date"
      );
      setReminders(remindersData);
    } catch (error) {
      console.error("Error loading reminders:", error);
    }
  };

  const markAsRead = async (id) => {
    await Reminder.update(id, { is_read: true });
    loadData();
  };

  const typeConfig = {
    appointment: {
      icon: Calendar,
      label: "Consulta",
      color: "from-blue-500 to-blue-600",
      bgColor: "bg-blue-100 text-blue-700 border-blue-200"
    },
    subscription: {
      icon: CreditCard,
      label: "Assinatura",
      color: "from-purple-500 to-purple-600",
      bgColor: "bg-purple-100 text-purple-700 border-purple-200"
    },
    welcome: {
      icon: Star,
      label: "Boas-vindas",
      color: "from-green-500 to-green-600",
      bgColor: "bg-green-100 text-green-700 border-green-200"
    }
  };

  if (!user) {
    return (
      <div className="min-h-screen flex items-center justify-center">
        <Card className="p-8 text-center">
          <UserIcon className="w-16 h-16 mx-auto mb-4 text-gray-400" />
          <h2 className="text-2xl font-bold mb-4">Faça login para ver seus lembretes</h2>
          <Button onClick={() => User.login()}>Fazer Login</Button>
        </Card>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gradient-to-br from-gray-50 to-green-50 p-6">
      <div className="max-w-4xl mx-auto">
        <motion.div
          initial={{ opacity: 0, y: -20 }}
          animate={{ opacity: 1, y: 0 }}
          className="mb-8"
        >
          <div className="flex items-center gap-3 mb-2">
            <div className="w-12 h-12 bg-gradient-to-br from-green-500 to-green-600 rounded-xl flex items-center justify-center shadow-lg">
              <Bell className="w-6 h-6 text-white" />
            </div>
            <h1 className="text-4xl font-bold text-gray-900">Lembretes</h1>
          </div>
          <p className="text-gray-600 text-lg">
            Mantenha-se informado sobre suas atividades
          </p>
        </motion.div>

        <div className="space-y-4">
          {reminders.length === 0 ? (
            <motion.div
              initial={{ opacity: 0 }}
              animate={{ opacity: 1 }}
              className="text-center py-20"
            >
              <Bell className="w-24 h-24 text-gray-300 mx-auto mb-4" />
              <h3 className="text-2xl font-semibold text-gray-900 mb-2">
                Nenhum lembrete
              </h3>
              <p className="text-gray-600">
                Você não tem lembretes no momento
              </p>
            </motion.div>
          ) : (
            reminders.map((reminder, index) => {
              const config = typeConfig[reminder.type];
              const Icon = config.icon;
              
              return (
                <motion.div
                  key={reminder.id}
                  initial={{ opacity: 0, x: -20 }}
                  animate={{ opacity: 1, x: 0 }}
                  transition={{ delay: 0.1 * index }}
                >
                  <Card className={`overflow-hidden hover:shadow-xl transition-all duration-300 border-l-4 ${
                    reminder.is_read ? 'border-gray-300 opacity-75' : 'border-green-500'
                  }`}>
                    <CardContent className="p-6">
                      <div className="flex items-start gap-4">
                        <div className={`w-12 h-12 bg-gradient-to-br ${config.color} rounded-xl flex items-center justify-center flex-shrink-0 shadow-lg`}>
                          <Icon className="w-6 h-6 text-white" />
                        </div>
                        
                        <div className="flex-1 min-w-0">
                          <div className="flex items-start justify-between gap-3 mb-2">
                            <h3 className="text-lg font-bold text-gray-900">
                              {reminder.title}
                            </h3>
                            <Badge className={`${config.bgColor} border flex-shrink-0`}>
                              {config.label}
                            </Badge>
                          </div>
                          
                          <p className="text-gray-600 mb-3 leading-relaxed">
                            {reminder.message}
                          </p>
                          
                          <div className="flex items-center justify-between">
                            <span className="text-sm text-gray-500">
                              {format(new Date(reminder.date), "dd 'de' MMMM, yyyy 'às' HH:mm", { locale: ptBR })}
                            </span>
                            
                            {!reminder.is_read && (
                              <Button
                                size="sm"
                                variant="outline"
                                onClick={() => markAsRead(reminder.id)}
                                className="text-green-600 hover:bg-green-50 border-green-200"
                              >
                                <Check className="w-4 h-4 mr-1" />
                                Marcar como lido
                              </Button>
                            )}
                            
                            {reminder.is_read && (
                              <Badge variant="outline" className="bg-gray-100 text-gray-600">
                                <Check className="w-3 h-3 mr-1" />
                                Lido
                              </Badge>
                            )}
                          </div>
                        </div>
                      </div>
                    </CardContent>
                  </Card>
                </motion.div>
              );
            })
          )}
        </div>
      </div>
    </div>
  );
}
