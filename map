import React, { useState, useEffect } from "react";
import { MapContainer, TileLayer, Marker, Popup } from "react-leaflet";
import { HealthFacility } from "@/entities/HealthFacility";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { MapPin, Phone, Navigation } from "lucide-react";
import { motion } from "framer-motion";
import "leaflet/dist/leaflet.css";
import L from "leaflet";

// Fix for default marker icons in react-leaflet
delete L.Icon.Default.prototype._getIconUrl;
L.Icon.Default.mergeOptions({
  iconRetinaUrl: "https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.7.1/images/marker-icon-2x.png",
  iconUrl: "https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.7.1/images/marker-icon.png",
  shadowUrl: "https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.7.1/images/marker-shadow.png",
});

const customIcons = {
  hospital: L.divIcon({
    className: 'custom-icon',
    html: '<div style="background: #DC2626; width: 32px; height: 32px; border-radius: 50%; display: flex; align-items: center; justify-content: center; color: white; font-weight: bold; box-shadow: 0 2px 8px rgba(0,0,0,0.3);">H</div>',
    iconSize: [32, 32],
  }),
  clinic: L.divIcon({
    className: 'custom-icon',
    html: '<div style="background: #2563EB; width: 32px; height: 32px; border-radius: 50%; display: flex; align-items: center; justify-content: center; color: white; font-weight: bold; box-shadow: 0 2px 8px rgba(0,0,0,0.3);">C</div>',
    iconSize: [32, 32],
  }),
  health_center: L.divIcon({
    className: 'custom-icon',
    html: '<div style="background: #16A34A; width: 32px; height: 32px; border-radius: 50%; display: flex; align-items: center; justify-content: center; color: white; font-weight: bold; box-shadow: 0 2px 8px rgba(0,0,0,0.3);">P</div>',
    iconSize: [32, 32],
  }),
};

export default function MapPage() {
  const [facilities, setFacilities] = useState([]);
  const [selectedType, setSelectedType] = useState("all");
  const [isLoading, setIsLoading] = useState(true);

  useEffect(() => {
    loadFacilities();
  }, []);

  const loadFacilities = async () => {
    setIsLoading(true);
    const data = await HealthFacility.list();
    setFacilities(data);
    setIsLoading(false);
  };

  const filteredFacilities = selectedType === "all" 
    ? facilities 
    : facilities.filter(f => f.type === selectedType);

  const typeColors = {
    hospital: "bg-red-100 text-red-700 border-red-200",
    clinic: "bg-blue-100 text-blue-700 border-blue-200",
    health_center: "bg-green-100 text-green-700 border-green-200"
  };

  const typeLabels = {
    hospital: "Hospital",
    clinic: "Clínica",
    health_center: "Posto de Saúde"
  };

  // Default center (can be user's location or city center)
  const defaultCenter = facilities.length > 0 
    ? [facilities[0].latitude || -27.2177, facilities[0].longitude || -49.6451]
    : [-27.2177, -49.6451]; // Joaçaba, SC

  return (
    <div className="min-h-screen bg-gradient-to-br from-gray-50 to-green-50 p-6">
      <div className="max-w-7xl mx-auto">
        <motion.div
          initial={{ opacity: 0, y: -20 }}
          animate={{ opacity: 1, y: 0 }}
          className="mb-8"
        >
          <h1 className="text-4xl font-bold text-gray-900 mb-2">Mapa da Cidade</h1>
          <p className="text-gray-600 text-lg">Encontre serviços de saúde próximos a você</p>
        </motion.div>

        {/* Filters */}
        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ delay: 0.1 }}
          className="flex flex-wrap gap-3 mb-6"
        >
          <button
            onClick={() => setSelectedType("all")}
            className={`px-6 py-2 rounded-full font-medium transition-all ${
              selectedType === "all"
                ? "bg-green-600 text-white shadow-lg"
                : "bg-white text-gray-700 hover:bg-gray-100"
            }`}
          >
            Todos
          </button>
          <button
            onClick={() => setSelectedType("hospital")}
            className={`px-6 py-2 rounded-full font-medium transition-all ${
              selectedType === "hospital"
                ? "bg-red-600 text-white shadow-lg"
                : "bg-white text-gray-700 hover:bg-gray-100"
            }`}
          >
            Hospitais
          </button>
          <button
            onClick={() => setSelectedType("clinic")}
            className={`px-6 py-2 rounded-full font-medium transition-all ${
              selectedType === "clinic"
                ? "bg-blue-600 text-white shadow-lg"
                : "bg-white text-gray-700 hover:bg-gray-100"
            }`}
          >
            Clínicas
          </button>
          <button
            onClick={() => setSelectedType("health_center")}
            className={`px-6 py-2 rounded-full font-medium transition-all ${
              selectedType === "health_center"
                ? "bg-green-600 text-white shadow-lg"
                : "bg-white text-gray-700 hover:bg-gray-100"
            }`}
          >
            Postos de Saúde
          </button>
        </motion.div>

        {/* Map */}
        <motion.div
          initial={{ opacity: 0, scale: 0.95 }}
          animate={{ opacity: 1, scale: 1 }}
          transition={{ delay: 0.2 }}
        >
          <Card className="overflow-hidden shadow-2xl border-none">
            <CardContent className="p-0">
              <div style={{ height: "600px", width: "100%" }}>
                {!isLoading && (
                  <MapContainer
                    center={defaultCenter}
                    zoom={13}
                    style={{ height: "100%", width: "100%" }}
                    className="rounded-lg"
                  >
                    <TileLayer
                      url="https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png"
                      attribution='&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a>'
                    />
                    {filteredFacilities.map((facility) => (
                      facility.latitude && facility.longitude && (
                        <Marker
                          key={facility.id}
                          position={[facility.latitude, facility.longitude]}
                          icon={customIcons[facility.type]}
                        >
                          <Popup>
                            <div className="p-2">
                              <h3 className="font-bold text-lg mb-2">{facility.name}</h3>
                              <Badge className={`${typeColors[facility.type]} border mb-2`}>
                                {typeLabels[facility.type]}
                              </Badge>
                              <p className="text-sm text-gray-600 flex items-start gap-2 mb-1">
                                <MapPin className="w-4 h-4 mt-0.5 flex-shrink-0" />
                                <span>{facility.address}</span>
                              </p>
                              {facility.phone && (
                                <p className="text-sm text-gray-600 flex items-center gap-2">
                                  <Phone className="w-4 h-4" />
                                  {facility.phone}
                                </p>
                              )}
                            </div>
                          </Popup>
                        </Marker>
                      )
                    ))}
                  </MapContainer>
                )}
              </div>
            </CardContent>
          </Card>
        </motion.div>

        {/* Facilities List */}
        <div className="mt-8 grid md:grid-cols-2 lg:grid-cols-3 gap-6">
          {filteredFacilities.map((facility, index) => (
            <motion.div
              key={facility.id}
              initial={{ opacity: 0, y: 20 }}
              animate={{ opacity: 1, y: 0 }}
              transition={{ delay: 0.3 + index * 0.05 }}
            >
              <Card className="hover:shadow-xl transition-all duration-300">
                <CardHeader>
                  <div className="flex items-start justify-between">
                    <CardTitle className="text-lg">{facility.name}</CardTitle>
                    <Badge className={`${typeColors[facility.type]} border`}>
                      {typeLabels[facility.type]}
                    </Badge>
                  </div>
                </CardHeader>
                <CardContent>
                  <div className="space-y-2">
                    <p className="text-sm text-gray-600 flex items-start gap-2">
                      <MapPin className="w-4 h-4 mt-0.5 flex-shrink-0 text-green-600" />
                      <span>{facility.address}</span>
                    </p>
                    {facility.phone && (
                      <p className="text-sm text-gray-600 flex items-center gap-2">
                        <Phone className="w-4 h-4 text-green-600" />
                        {facility.phone}
                      </p>
                    )}
                  </div>
                </CardContent>
              </Card>
            </motion.div>
          ))}
        </div>
      </div>
    </div>
  );
}
